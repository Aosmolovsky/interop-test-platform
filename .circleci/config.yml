# Interop Test Platofrm CircleCI

version: 2.1

orbs:
  coverage-reporter: codacy/coverage-reporter@10.0.3
  node: circleci/node@3.0.0

executors:
  standard:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/repo

jobs:
  build-and-test:
    executor: standard
    steps:
      - checkout
      - run:
          name: Copy configuration files
          command: cp ./src/.env.example ./src/.env && cp .env.example .env
      - node/install:
          node-version: lts
      - node/install-packages:
          app-dir: ~/repo
      - run:
          name: Build client assets
          command: npm run prod
      - run:
          name: Build PHP Image
          command: |
            echo "Building Docker Image: gsmainclusivetechlab/interop-test-platform/php:$CIRCLE_SHA1"
            docker build -t gsmainclusivetechlab/interop-test-platform/php:$CIRCLE_SHA1 -f ./src/build/Dockerfile.php ./src
      - run:
          name: Build NGINX Image
          command: |
            echo "Building Docker Image: gsmainclusivetechlab/interop-test-platform/web:$CIRCLE_SHA1"
            docker build -t gsmainclusivetechlab/interop-test-platform/web:$CIRCLE_SHA1 -f ./src/build/Dockerfile.web ./src
      - run:
          name: Set docker user
          command: echo UID=`id -u`:`id -g` >> .env
      - run:
          name: Run Tests and get coverage
          # N.B. We move the `html` to `src` directory so paths are mapped correctly in coverage report
          command: |
            docker-compose run \
              -v /tmp/results:/tmp/results \
              php bash -c "\
              WAIT_HOSTS=mysqldb:3306 /wait
              cd ..
              mv html src
              cd src
              phpdbg -qrr vendor/bin/phpunit \
                --coverage-html /tmp/results/coverage-report-html \
                --coverage-clover /tmp/results/coverage-report-clover/clover.xml \
            "
      - coverage-reporter/send_report:
          coverage-reports: /tmp/results/coverage-report-clover/clover.xml
          project-token: $CODACY_PROJECT_TOKEN
      - run:
          name: Copy codacy json report to artifact
          command: sudo cp /var/tmp/codacy-coverage-*.json /tmp/results/
      - store_test_results:
          path: /tmp/results
      - store_artifacts:
          path: /tmp/results
      # TODO: fix browser testing and include screenshots
      # - store_artifacts: 
      #   path: src/tests/Browser/screenshots

      # Using workspaces is pretty slow - better if we can avoid it unless we have high parallelism to justify complex workflows
      # - run:
      #     name: Save PHP image to workspace
      #     command: |
      #       docker save gsmainclusivetechlab/interop-test-platform/php:$CIRCLE_SHA1 > /tmp/image-php.tar
      # - run:
      #     name: Save NGINX image to workspace
      #     command: |
      #       docker save gsmainclusivetechlab/interop-test-platform/web:$CIRCLE_SHA1 > /tmp/image-web.tar
      # - persist_to_workspace:
      #     root: /tmp
      #     paths:
      #       - ./image-php.tar
      #       - ./image-web.tar

  publish:
    executor: standard
    steps:
      - run:
          name: TODO
          command: echo "coming soon"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-and-test
      - approve-publish:
          type: approval 
          requires: 
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - publish:
          requires: 
            - build-and-test
            - approve-publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/