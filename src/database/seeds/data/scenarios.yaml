- name: Mobile Money API v1.1.0 and Mojaloop FSPIOP API v1.0
  components:
    - name: Payer
      paths:
        - target_id: Service Provider
          simulated: false
    - name: Service Provider
      paths:
        - target_id: Payer
          simulated: false
        - target_id: Mobile Money Operator 1
          simulated: true
    - name: Mobile Money Operator 1
      api_service_id: Mobile Money v1.1.0
      paths:
        - target_id: Service Provider
          simulated: true
        - target_id: Mojaloop
          simulated: true
    - name: Mojaloop
      api_service_id: Mojaloop Hub v1.0
      paths:
        - target_id: Mobile Money Operator 1
          simulated: true
        - target_id: Mobile Money Operator 2
          simulated: true
    - name: Mobile Money Operator 2
      api_service_id: Mojaloop FSP v1.0
      paths:
        - target_id: Mojaloop
          simulated: true
  use_cases:
    - name: Merchant-Initiated Merchant Payment
      description: |
        A Merchant-Initiated Merchant Payment is typically a receive amount, where the Payer FSP is not disclosing any fees to the Payee FSP.
        Please refer to 5.1.6.8 in "Open API for FSP Interoperability Specification" for more details
      test_cases:
        - name: Authorized Transaction
          behavior: positive
          description: |
            The Service Provider wants to test if he is capable of receiving a transaction from a different wallet provider that he has an account.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction simulating an approved transaction.
          precondition: |
            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".
          test_data_example:
            uri: /transactions
            method: POST
            headers:
              accept: 'application/json'
              content-type: 'application/json'
              x-callback-url: 'http://example.com/example'
              x-date: '2020-02-20T10:28:44.466Z'
            body:
              amount: '100.00'
              currency: 'USD'
              type: 'merchantpay'
              debitParty:
                key: "msisdn"
                value: "+33555123456"
              creditParty:
                key: "msisdn"
                value: "+33555789123"
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
                - name: Server Correlation Id is specified correctly
                  rules:
                    body.serverCorrelationId: 'regex:/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/'
                - name: Status is specified correctly
                  rules:
                    body.status: 'in:pending'
                - name: Notification Method is specified correctly
                  rules:
                    body.notificationMethod: 'in:callback'
            - name: POST /transactionRequests
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /quotes
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /quotes
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /quotes/{ID}
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /quotes/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /transfers
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: Transfer ID is present
                  rules:
                    body.transferId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Payee Fsp is specified correctly
                  rules:
                    body.payeeFsp: 'regex:/[0-9a-z]{1,32}$/'
                - name: Payer Fsp Fsp is specified correctly
                  rules:
                    body.payerFsp: 'regex:/[0-9a-z]{1,32}$/'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
                - name: Expiration is specified correctly
                  rules:
                    body.expiration: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: ilpPacket is specified correctly
                  rules:
                    body.ilpPacket: 'regex:/^[A-Za-z0-9-_]+[=]{0,2}$/'
                - name: condition is specified correctly
                  rules:
                    body.condition: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transfers
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Transfer ID is present
                  rules:
                    body.transferId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Payee Fsp is specified correctly
                  rules:
                    body.payeeFsp: 'regex:/[0-9a-z]{1,32}$/'
                - name: Payer Fsp Fsp is specified correctly
                  rules:
                    body.payerFsp: 'regex:/[0-9a-z]{1,32}$/'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'regex:/^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
                - name: Expiration is specified correctly
                  rules:
                    body.expiration: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: ilpPacket is specified correctly
                  rules:
                    body.ilpPacket: 'regex:/^[A-Za-z0-9-_]+[=]{0,2}$/'
                - name: condition is specified correctly
                  rules:
                    body.condition: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            #            - name: PUT /X-Callback-URL
            #              source_id: Mobile Money Operator 1
            #              target_id: Service Provider
            #              test_request_scripts:
            #                - name: Header has the Url Callback
            #                  rules:
            #                    headers.X-Callback-URL: 'regex:/.*/'
            #                - name: Debit and credit party is valid
            #                  rules:
            #                    body.debitParty.*.key: 'in:msisdn'
            #                    body.debitParty.*.value: 'in:+33555123456'
            #                    body.creditParty.*.key: 'in:msisdn'
            #                    body.creditParty.*.value: 'in:+33555789123'
            #                - name: Amount and currency are specified correctly
            #                  rules:
            #                    body.amount: 'regex:/ˆ([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$/'
            #                    body.currency: 'regex:/^[A-Z]{3}/'
            #                - name: Transaction is a Merchant Payment
            #                  rules:
            #                    body.type: 'in:merchantpay'
            #                - name: Transaction was approved
            #                  rules:
            #                    body.transactionStatus: 'in:approved'
            #              test_response_scripts:
            #                - name: Transaction was successfully accepted
            #                  rules:
            #                    status: 'in:204'
            - name: PUT /transfers/{ID}
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transfer\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Transfer State is COMMITTED
                  rules:
                    body.transactionRequestState: 'in:COMMITTED'
                - name: completedTimestamp is specified correctly
                  rules:
                    body.completedTimestamp: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: fulfilment is specified correctly
                  rules:
                    body.fulfilment: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transfers/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transfer\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Transfer State is COMMITTED
                  rules:
                    body.transactionRequestState: 'in:COMMITTED'
                - name: completedTimestamp is specified correctly
                  rules:
                    body.completedTimestamp: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: fulfilment is specified correctly
                  rules:
                    body.fulfilment: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
        - name: Authorized Transaction (only reponse validation)
          behavior: positive
          description: |
            **Description**

            The Service Provider wants to test if he is capable of receiving a transaction from a different wallet provider that he has an account.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction simulating an approved transaction.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"100.00",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_response_scripts:
                - name: Transaction was succeful acepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /quotes
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /quotes
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /quotes/{ID}
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /quotes/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /transfers
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transfers
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            #            - name: PUT /X-Callback-URL
            #              source_id: Mobile Money Operator 1
            #              target_id: Service Provider
            #              test_response_scripts:
            #                - name: Transaction was successfully accepted
            #                  rules:
            #                    status: 'in:204'
            - name: PUT /transfers/{ID}
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transfers/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
        - name: Overriding Example
          behavior: positive
          description: |
            **Description**

            Send data from example below and see that amount, currency and both msisdns are different from what you sent.


            **Test data headers**

            {
                  "Accept": "application/json",
                  "Content-Type": "application/json",
                  "X-Callback-URL": "http://example.com/example",
                  "X-Date": "2020-02-20T10:28:44.466Z"
            }


            **Test data body**

            {
                  "amount":"100.00",
                  "currency":"USD",
                  "type":"merchantpay",
                  "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                  "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
            }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
              test_response_scripts:
                - name: Transaction was succeful acepted
                  rules:
                    status: 'in:202'
              test_request_setups:
                - name: Override amount, currency and both msisdns
                  values:
                    body:
                      amount: '77.77'
                      currency: 'GBP'
                      debitParty.value: '11111111'
                      creditParty.value: '22222222'
              test_response_setups:
                - name: Override response status
                  values:
                    status: 500
        - name: Transaction Request Rejected by Payer FSP
          behavior: positive
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating an rejection by the Payer.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"15.15",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:15.15'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
                - name: Server Correlation Id is specified correctly
                  rules:
                    body.serverCorrelationId: 'regex:/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/'
                - name: Status is specified correctly
                  rules:
                    body.status: 'in:pending'
                - name: Notification Method is specified correctly
                  rules:
                    body.notificationMethod: 'in:callback'
            - name: POST /transactionRequests
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:15.15'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:15.15'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Rejected
                  rules:
                    body.transactionRequestState: 'in:REJECTED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Rejected
                  rules:
                    body.transactionRequestState: 'in:REJECTED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            # - name: PUT /X-Callback-URL
            #   source_id: Mobile Money Operator 1
            #   target_id: Service Provider
            #   test_request_scripts:
            #     - name: Header has the Url Callback
            #       rules:
            #         headers.X-Callback-URL: 'regex:/.*/'
            #     - name: Debit and credit party is valid
            #       rules:
            #         body.debitParty.*.key: 'in:msisdn'
            #         body.debitParty.*.value: 'in:+33555123456'
            #         body.creditParty.*.key: 'in:msisdn'
            #         body.creditParty.*.value: 'in:+33555789123'
            #     - name: Amount and currency are specified correctly
            #       rules:
            #         body.amount: 'in:15.15'
            #         body.currency: 'regex:/^[A-Z]{3}/'
            #     - name: Transaction is a Merchant Payment
            #       rules:
            #         body.type: 'in:merchantpay'
            #     - name: Transaction was declined
            #       rules:
            #         body.transactionStatus: 'in:declined'
            #   test_response_scripts:
            #     - name: Transaction was successfully declined
            #       rules:
            #         status: 'in:204'
        - name: Decline Transaction Error 400
          behavior: negative
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating a 400 Error.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "4.00".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"4.00",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:4'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:400'
                - name: Error is specified correctly
                  rules:
                    body.errorCategory: 'in:businessRule'
                    body.errorCode: 'in:genericError'
        - name: Decline Transaction Error 401
          behavior: negative
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating a 401 Error.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "4.01".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"4.01",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:4.01'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:401'
                - name: Error is specified correctly
                  rules:
                    body.errorCategory: 'in:authorisation'
                    body.errorCode: 'in:genericError'
        - name: Decline Transaction Error 404
          behavior: negative
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating a 404 Error.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "4.04".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"4.04",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:4.04'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:404'
                - name: Error is specified correctly
                  rules:
                    body.errorCategory: 'in:validation'
                    body.errorCode: 'in:genericError'
        - name: Decline Transaction Error 500
          behavior: negative
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating a 500 Error.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "5.00".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"5.00",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:5.00'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:500'
                - name: Error is specified correctly
                  rules:
                    body.errorCategory: 'in:internal'
                    body.errorCode: 'in:genericError'
        - name: Decline Transaction Error 503
          behavior: negative
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction, simulating a 503 Error.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "5.03".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"5.03",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:5.03'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:503'
                - name: Error is specified correctly
                  rules:
                    body.errorCategory: 'in:internal'
                    body.errorCode: 'in:genericError'
        - name: Rejected Transaction
          behavior: positive
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction simulating an rejected transaction after the quote by the Payer.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "10.10".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"10.10",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:10.10'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was succeful acepted
                  rules:
                    status: 'in:202'
                - name: Server Correlation Id is specified correctly
                  rules:
                    body.serverCorrelationId: 'regex:/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/'
                - name: Status is specified correctly
                  rules:
                    body.status: 'in:pending'
                - name: Notification Method is specified correctly
                  rules:
                    body.notificationMethod: 'in:callback'
            - name: POST /transactionRequests
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:10.10'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:10.10'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /quotes
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:10.10'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /quotes
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:10.10'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /quotes/{ID}
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/quotes\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Amount and currency are specified correctly
                  rules:
                    body.transferAmount.amount: 'in:10.10'
                    body.transferAmount.currency: 'regex:/^[A-Z]{3}/'
                - name: Expiration is specified correctly
                  rules:
                    body.expiration: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: ilpPacket is specified correctly
                  rules:
                    body.ilpPacket: 'regex:/^[A-Za-z0-9-_]+[=]{0,2}$/'
                - name: condition is specified correctly
                  rules:
                    body.condition: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /quotes/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/quotes\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Amount and currency are specified correctly
                  rules:
                    body.transferAmount.amount: 'in:10.10'
                    body.transferAmount.currency: 'regex:/^[A-Z]{3}/'
                - name: Expiration is specified correctly
                  rules:
                    body.expiration: 'regex:/^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$/'
                - name: ilpPacket is specified correctly
                  rules:
                    body.ilpPacket: 'regex:/^[A-Za-z0-9-_]+[=]{0,2}$/'
                - name: condition is specified correctly
                  rules:
                    body.condition: 'regex:/^[A-Za-z0-9-_]{43}$/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:REJECTED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:REJECTED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            # - name: PUT /X-Callback-URL
            #   source_id: Mobile Money Operator 1
            #   target_id: Service Provider
            #   test_request_scripts:
            #     - name: Header has the Url Callback
            #       rules:
            #         headers.X-Callback-URL: 'regex:/.*/'
            #     - name: Debit and credit party is valid
            #       rules:
            #         body.debitParty.*.key: 'in:msisdn'
            #         body.debitParty.*.value: 'in:+33555123456'
            #         body.creditParty.*.key: 'in:msisdn'
            #         body.creditParty.*.value: 'in:+33555789123'
            #     - name: Amount and currency are specified correctly
            #       rules:
            #         body.amount: 'in:10.10'
            #         body.currency: 'regex:/^[A-Z]{3}/'
            #     - name: Transaction is a Merchant Payment
            #       rules:
            #         body.type: 'in:merchantpay'
            #     - name: Transaction was declined
            #       rules:
            #         body.transactionStatus: 'in:declined'
            #   test_response_scripts:
            #     - name: Transaction was successfully declined
            #       rules:
            #         status: 'in:204'
        - name: Quote Rejected by MMO1
          behavior: positive
          description: |
            **Description**

            The Service Provider wants to test if he is capable to receive a transaction from a different wallet.
            In this case we simulate the scenario when the Payer would like to buy goods or services from a Service Provider (the Payee), but each of them uses different wallet providers.
            This flow shows the necessary steps for this transaction simulating an rejected quote by MMO1.


            **Pre-conditions**

            Service Provider has GSMA Mobile Money API Implemented.
            Service Provider is capable to handled async calls.
            Payee and Payer MMOs exist in Mojaloop as Participants.
            Payee and Payer exist in Mojaloop as Parties.
            Amount should be the value "51.03".
            Debit party should be identified by account identier "msisdn" with the value "+33555123456".
            Credit party should be identified by account identier "msisdn" with the value  value "+33555789123".


            **Test data headers**

              {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "X-Callback-URL": "http://example.com/example",
                    "X-Date": "2020-02-20T10:28:44.466Z"
              }


            **Test data body**

              {
                    "amount":"51.03",
                    "currency":"USD",
                    "type":"merchantpay",
                    "debitParty": [{"key":"msisdn", "value":"+33555123456"}],
                    "creditParty": [{"key":"msisdn", "value":"+33555789123"}]
              }
          test_steps:
            - name: POST /transactions
              source_id: Service Provider
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Header has the Url Callback
                  rules:
                    headers.X-Callback-URL: 'regex:/.*/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.debitParty.*.key: 'in:msisdn'
                    body.debitParty.*.value: 'in:+33555123456'
                    body.creditParty.*.key: 'in:msisdn'
                    body.creditParty.*.value: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount: 'in:51.03'
                    body.currency: 'regex:/^[A-Z]{3}/'
                - name: Transaction is a Merchant Payment
                  rules:
                    body.type: 'in:merchantpay'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
                - name: Server Correlation Id is specified correctly
                  rules:
                    body.serverCorrelationId: 'regex:/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/'
                - name: Status is specified correctly
                  rules:
                    body.status: 'in:pending'
                - name: Notification Method is specified correctly
                  rules:
                    body.notificationMethod: 'in:callback'
            - name: POST /transactionRequests
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:51.03'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /transactionRequests
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Transaction Request Id created
                  rules:
                    body.transactionRequestId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:51.03'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /transactionRequests/{ID}
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: PUT /transactionRequests/{ID}
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/transactionRequests\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Status is Received
                  rules:
                    body.transactionRequestState: 'in:RECEIVED'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:200'
            - name: POST /quotes
              source_id: Mobile Money Operator 2
              target_id: Mojaloop
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:51.03'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: POST /quotes
              source_id: Mojaloop
              target_id: Mobile Money Operator 1
              test_request_scripts:
                - name: Mandatory IDs is present
                  rules:
                    body.quoteId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                    body.transactionId: 'regex:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/'
                - name: Transaction Type is a Merchant Payment
                  rules:
                    body.transactionType.scenario: 'in:PAYMENT'
                    body.transactionType.initiator: 'in:PAYEE'
                    body.transactionType.initiatorType: 'in:BUSINESS'
                - name: Payer wants to send money to Payee
                  rules:
                    body.amountType: 'in:SEND'
                - name: Debit and Credit party is present and is a Valid Party in the network
                  rules:
                    body.payer.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payer.partyIdInfo.partyIdentifier: 'in:+33555123456'
                    body.payee.partyIdInfo.partyIdType: 'in:msisdn'
                    body.payee.partyIdInfo.partyIdentifier: 'in:+33555789123'
                - name: Amount and currency are specified correctly
                  rules:
                    body.amount.amount: 'in:51.03'
                    body.amount.currency: 'regex:/^[A-Z]{3}/'
              test_response_scripts:
                - name: Transaction was successfully accepted
                  rules:
                    status: 'in:202'
            - name: PUT /quotes/{ID}/error
              source_id: Mobile Money Operator 1
              target_id: Mojaloop
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/quotes\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Error Code is specified correctly
                  rules:
                    body.errorInformation.errorCode: 'in:51.03'
                    body.errorInformation.errorDescription: 'regex:/^.{1,128}$/'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:200'
            - name: PUT /quotes/{ID}/error
              source_id: Mojaloop
              target_id: Mobile Money Operator 2
              test_request_scripts:
                - name: ID is Valid
                  rules:
                    uri: 'regex:/quotes\/[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i'
                - name: Error Code is specified correctly
                  rules:
                    body.errorInformation.errorCode: 'in:51.03'
                    body.errorInformation.errorDescription: 'regex:/^.{1,128}$/'
              test_response_scripts:
                - name: Transaction was successfully declined
                  rules:
                    status: 'in:200'
            # - name: PUT /X-Callback-URL
            #   source_id: Mobile Money Operator 1
            #   target_id: Service Provider
            #   test_request_scripts:
            #     - name: Header has the Url Callback
            #       rules:
            #         headers.X-Callback-URL: 'regex:/.*/'
            #     - name: Debit and credit party is valid
            #       rules:
            #         body.debitParty.*.key: 'in:msisdn'
            #         body.debitParty.*.value: 'in:+33555123456'
            #         body.creditParty.*.key: 'in:msisdn'
            #         body.creditParty.*.value: 'in:+33555789123'
            #     - name: Amount and currency are specified correctly
            #       rules:
            #         body.amount: 'in:51.03'
            #         body.currency: 'regex:/^[A-Z]{3}/'
            #     - name: Transaction is a Merchant Payment
            #       rules:
            #         body.type: 'in:merchantpay'
            #     - name: Transaction was declined
            #       rules:
            #         body.transactionStatus: 'in:declined'
            #   test_response_scripts:
            #     - name: Transaction was successfully declined
            #       rules:
            #         status: 'in:204'
